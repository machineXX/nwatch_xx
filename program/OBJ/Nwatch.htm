<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Nwatch.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Nwatch.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Apr 07 00:38:58 2022
<BR><P>
<H3>Maximum Stack Usage =        312 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
draw &rArr; show_weather_forecast &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[11f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[29]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
 <LI><a href="#[205]">next</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[205]">next</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[29]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[19]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from millis.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from wwdg.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d6]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[58]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[56]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[55]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[ab]">alarmsDown</a> from alarms.o(i.alarmsDown) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[ac]">alarmsDraw</a> from alarms.o(i.alarmsDraw) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[aa]">alarmsUp</a> from alarms.o(i.alarmsUp) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[59]">back</a> from menu.o(i.back) referenced from menu.o(i.addBackOption)
 <LI><a href="#[73]">batteryUpdate</a> from diag.o(i.batteryUpdate) referenced from diag.o(i.itemLoader)
 <LI><a href="#[6f]">btnBounce</a> from game3.o(i.btnBounce) referenced from game3.o(i.game3_start)
 <LI><a href="#[6a]">btnDown</a> from game2.o(i.btnDown) referenced from game2.o(i.game2_start)
 <LI><a href="#[66]">btnExit</a> from game1.o(i.btnExit) referenced from game1.o(i.game1_start)
 <LI><a href="#[6b]">btnExit</a> from game2.o(i.btnExit) referenced from game2.o(i.game2_start)
 <LI><a href="#[6e]">btnExit</a> from game3.o(i.btnExit) referenced from game3.o(i.game3_start)
 <LI><a href="#[a7]">btnExit</a> from myapp.o(i.btnExit) referenced from myapp.o(i.myapp_open)
 <LI><a href="#[b6]">btnExit</a> from stopwatch.o(i.btnExit) referenced from stopwatch.o(i.stopwatch_open)
 <LI><a href="#[ba]">btnExit</a> from torch.o(i.btnExit) referenced from torch.o(i.torch_open)
 <LI><a href="#[a8]">btnFlashRate</a> from myapp.o(i.btnFlashRate) referenced from myapp.o(i.myapp_open)
 <LI><a href="#[bb]">btnFlashRate</a> from torch.o(i.btnFlashRate) referenced from torch.o(i.torch_open)
 <LI><a href="#[67]">btnLeft</a> from game1.o(i.btnLeft) referenced from game1.o(i.game1_start)
 <LI><a href="#[70]">btnPause</a> from game3.o(i.btnPause) referenced from game3.o(i.game3_start)
 <LI><a href="#[b8]">btnReset</a> from stopwatch.o(i.btnReset) referenced from stopwatch.o(i.stopwatch_open)
 <LI><a href="#[68]">btnRight</a> from game1.o(i.btnRight) referenced from game1.o(i.game1_start)
 <LI><a href="#[b7]">btnStartStop</a> from stopwatch.o(i.btnStartStop) referenced from stopwatch.o(i.stopwatch_open)
 <LI><a href="#[6c]">btnUp</a> from game2.o(i.btnUp) referenced from game2.o(i.game2_start)
 <LI><a href="#[62]">close_screen</a> from face_function.o(i.close_screen) referenced from buttons.o(i.buttons_init)
 <LI><a href="#[62]">close_screen</a> from face_function.o(i.close_screen) referenced from my_normal.o(i.down)
 <LI><a href="#[62]">close_screen</a> from face_function.o(i.close_screen) referenced from menu.o(i.menu_select)
 <LI><a href="#[62]">close_screen</a> from face_function.o(i.close_screen) referenced from my_normal.o(i.up)
 <LI><a href="#[61]">display_load</a> from display.o(i.display_load) referenced 4 times from game1.o(i.btnExit)
 <LI><a href="#[61]">display_load</a> from display.o(i.display_load) referenced from tunemaker.o(i.select)
 <LI><a href="#[a2]">down</a> from my_normal.o(i.down) referenced from my_normal.o(i.my_watchface_normal)
 <LI><a href="#[bf]">down</a> from tunemaker.o(i.down) referenced from tunemaker.o(i.tunemakerOpen)
 <LI><a href="#[c1]">down</a> from watchface2.o(i.down) referenced from watchface2.o(i.watchface2)
 <LI><a href="#[c5]">down</a> from watchface.o(i.down) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[c9]">down</a> from face_cpu.o(i.down) referenced from face_cpu.o(i.watchface_CPU)
 <LI><a href="#[cd]">down</a> from watchface_asr.o(i.down) referenced from watchface_asr.o(i.watchface_ast)
 <LI><a href="#[d1]">down</a> from normal.o(i.down) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[5a]">draw</a> from alarm.o(i.draw) referenced from alarm.o(i.alarm_update)
 <LI><a href="#[69]">draw</a> from game2.o(i.draw) referenced from game2.o(i.game2_start)
 <LI><a href="#[6d]">draw</a> from game3.o(i.draw) referenced from game3.o(i.game3_start)
 <LI><a href="#[a1]">draw</a> from my_normal.o(i.draw) referenced from my_normal.o(i.my_watchface_normal)
 <LI><a href="#[a6]">draw</a> from myapp.o(i.draw) referenced from myapp.o(i.myapp_open)
 <LI><a href="#[b5]">draw</a> from stopwatch.o(i.draw) referenced from stopwatch.o(i.stopwatch_open)
 <LI><a href="#[b9]">draw</a> from torch.o(i.draw) referenced from torch.o(i.torch_open)
 <LI><a href="#[bc]">draw</a> from tunemaker.o(i.draw) referenced from tunemaker.o(i.tunemakerOpen)
 <LI><a href="#[c0]">draw</a> from watchface2.o(i.draw) referenced from watchface2.o(i.watchface2)
 <LI><a href="#[c4]">draw</a> from watchface.o(i.draw) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[c8]">draw</a> from face_cpu.o(i.draw) referenced from face_cpu.o(i.watchface_CPU)
 <LI><a href="#[cc]">draw</a> from watchface_asr.o(i.draw) referenced from watchface_asr.o(i.watchface_ast)
 <LI><a href="#[d0]">draw</a> from normal.o(i.draw) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[d4]">draw</a> from weather.o(i.draw) referenced from weather.o(i.weather_forecast)
 <LI><a href="#[57]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[65]">game1_draw</a> from game1.o(i.game1_draw) referenced from game1.o(i.game1_start)
 <LI><a href="#[75]">game1_start</a> from game1.o(i.game1_start) referenced from games.o(i.itemLoader)
 <LI><a href="#[76]">game2_start</a> from game2.o(i.game2_start) referenced from games.o(i.itemLoader)
 <LI><a href="#[77]">game3_start</a> from game3.o(i.game3_start) referenced from games.o(i.itemLoader)
 <LI><a href="#[5c]">itemLoader</a> from timedate.o(i.itemLoader) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[5c]">itemLoader</a> from timedate.o(i.itemLoader) referenced from timedate.o(i.endSelect)
 <LI><a href="#[89]">itemLoader</a> from alarms.o(i.itemLoader) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[8d]">itemLoader</a> from diag.o(i.itemLoader) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[8f]">itemLoader</a> from m_display.o(i.itemLoader) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[91]">itemLoader</a> from games.o(i.itemLoader) referenced from games.o(i.mGamesOpen)
 <LI><a href="#[98]">itemLoader</a> from m_main.o(i.itemLoader) referenced from m_main.o(i.mOpen)
 <LI><a href="#[9a]">itemLoader</a> from settings.o(i.itemLoader) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[9c]">itemLoader</a> from sleep.o(i.itemLoader) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[9f]">itemLoader</a> from sound.o(i.itemLoader) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[5c]">itemLoader</a> from timedate.o(i.itemLoader) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[89]">itemLoader</a> from alarms.o(i.itemLoader) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[78]">mAlarmsOpen</a> from alarms.o(i.mAlarmsOpen) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[78]">mAlarmsOpen</a> from alarms.o(i.mAlarmsOpen) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[84]">mDiagOpen</a> from diag.o(i.mDiagOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[84]">mDiagOpen</a> from diag.o(i.mDiagOpen) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[83]">mDisplayOpen</a> from m_display.o(i.mDisplayOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[83]">mDisplayOpen</a> from m_display.o(i.mDisplayOpen) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[64]">mDown</a> from timedate.o(i.mDown) referenced from timedate.o(i.endSelect)
 <LI><a href="#[64]">mDown</a> from timedate.o(i.mDown) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[9e]">mDraw</a> from sleep.o(i.mDraw) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[7c]">mGamesOpen</a> from games.o(i.mGamesOpen) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[7c]">mGamesOpen</a> from games.o(i.mGamesOpen) referenced from games.o(i.mGamesOpen)
 <LI><a href="#[94]">mOpen</a> from m_main.o(i.mOpen) referenced from m_main.o(i.mMainOpen)
 <LI><a href="#[94]">mOpen</a> from m_main.o(i.mOpen) referenced from m_main.o(i.mOpen)
 <LI><a href="#[5e]">mSelect</a> from timedate.o(i.mSelect) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[5e]">mSelect</a> from timedate.o(i.mSelect) referenced from timedate.o(i.endSelect)
 <LI><a href="#[8b]">mSelect</a> from alarms.o(i.mSelect) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[8e]">mSelect</a> from diag.o(i.mSelect) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[90]">mSelect</a> from m_display.o(i.mSelect) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[92]">mSelect</a> from games.o(i.mSelect) referenced from games.o(i.mGamesOpen)
 <LI><a href="#[99]">mSelect</a> from m_main.o(i.mSelect) referenced from m_main.o(i.mOpen)
 <LI><a href="#[9b]">mSelect</a> from settings.o(i.mSelect) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[9d]">mSelect</a> from sleep.o(i.mSelect) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[a0]">mSelect</a> from sound.o(i.mSelect) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[5e]">mSelect</a> from timedate.o(i.mSelect) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[8b]">mSelect</a> from alarms.o(i.mSelect) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[7e]">mSettingsOpen</a> from settings.o(i.mSettingsOpen) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[7e]">mSettingsOpen</a> from settings.o(i.mSettingsOpen) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[81]">mSleepOpen</a> from sleep.o(i.mSleepOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[81]">mSleepOpen</a> from sleep.o(i.mSleepOpen) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[82]">mSoundOpen</a> from sound.o(i.mSoundOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[82]">mSoundOpen</a> from sound.o(i.mSoundOpen) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[80]">mTimeDateOpen</a> from timedate.o(i.mTimeDateOpen) referenced from settings.o(i.itemLoader)
 <LI><a href="#[80]">mTimeDateOpen</a> from timedate.o(i.mTimeDateOpen) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[63]">mUp</a> from timedate.o(i.mUp) referenced from timedate.o(i.endSelect)
 <LI><a href="#[63]">mUp</a> from timedate.o(i.mUp) referenced from timedate.o(i.mTimeDateOpen)
 <LI><a href="#[7f]">menu_close</a> from menu.o(i.menu_close) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[96]">menu_down</a> from menu.o(i.menu_down) referenced from m_main.o(i.mOpen)
 <LI><a href="#[95]">menu_draw</a> from menu.o(i.menu_draw) referenced from m_main.o(i.mOpen)
 <LI><a href="#[93]">menu_select</a> from menu.o(i.menu_select) referenced from m_main.o(i.mMainOpen)
 <LI><a href="#[93]">menu_select</a> from menu.o(i.menu_select) referenced from m_main.o(i.mOpen)
 <LI><a href="#[93]">menu_select</a> from menu.o(i.menu_select) referenced from my_normal.o(i.my_watchface_normal)
 <LI><a href="#[93]">menu_select</a> from menu.o(i.menu_select) referenced from watchface2.o(i.watchface2)
 <LI><a href="#[93]">menu_select</a> from menu.o(i.menu_select) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[93]">menu_select</a> from menu.o(i.menu_select) referenced from face_cpu.o(i.watchface_CPU)
 <LI><a href="#[93]">menu_select</a> from menu.o(i.menu_select) referenced from watchface_asr.o(i.watchface_ast)
 <LI><a href="#[93]">menu_select</a> from menu.o(i.menu_select) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[97]">menu_up</a> from menu.o(i.menu_up) referenced from m_main.o(i.mOpen)
 <LI><a href="#[c7]">modeset</a> from watchface.o(i.modeset) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[cf]">modeset</a> from watchface_asr.o(i.modeset) referenced from watchface_asr.o(i.watchface_ast)
 <LI><a href="#[a]">my_watchface_normal</a> from my_normal.o(i.my_watchface_normal) referenced 2 times from face_function.o(.data)
 <LI><a href="#[a]">my_watchface_normal</a> from my_normal.o(i.my_watchface_normal) referenced from my_normal.o(i.down)
 <LI><a href="#[a]">my_watchface_normal</a> from my_normal.o(i.my_watchface_normal) referenced from my_normal.o(i.my_watchface_normal)
 <LI><a href="#[a]">my_watchface_normal</a> from my_normal.o(i.my_watchface_normal) referenced from weather.o(i.to_my_normal)
 <LI><a href="#[a]">my_watchface_normal</a> from my_normal.o(i.my_watchface_normal) referenced from my_normal.o(i.up)
 <LI><a href="#[a]">my_watchface_normal</a> from my_normal.o(i.my_watchface_normal) referenced from weather.o(i.weather_forecast)
 <LI><a href="#[7d]">myapp_open</a> from myapp.o(i.myapp_open) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from games.o(i.mGamesOpen)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from m_main.o(i.mOpen)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[8c]">nextOption</a> from menu.o(i.nextOption) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[d3]">old_btn4</a> from face_function.o(i.old_btn4) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[c3]">open_cpuface</a> from watchface2.o(i.open_cpuface) referenced from watchface2.o(i.watchface2)
 <LI><a href="#[cb]">open_cpuface</a> from face_cpu.o(i.open_cpuface) referenced from face_cpu.o(i.watchface_CPU)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from alarms.o(i.mAlarmsOpen)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from diag.o(i.mDiagOpen)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from m_display.o(i.mDisplayOpen)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from games.o(i.mGamesOpen)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from m_main.o(i.mOpen)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from settings.o(i.mSettingsOpen)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from sleep.o(i.mSleepOpen)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from sound.o(i.mSoundOpen)
 <LI><a href="#[8a]">prevOption</a> from menu.o(i.prevOption) referenced from alarms.o(i.selectAlarm)
 <LI><a href="#[88]">saveTimeDate</a> from timedate.o(i.saveTimeDate) referenced from timedate.o(i.itemLoader)
 <LI><a href="#[be]">select</a> from tunemaker.o(i.select) referenced from tunemaker.o(i.tunemakerOpen)
 <LI><a href="#[71]">selectAlarm</a> from alarms.o(i.selectAlarm) referenced from alarms.o(i.itemLoader)
 <LI><a href="#[86]">selectDate</a> from timedate.o(i.selectDate) referenced from timedate.o(i.itemLoader)
 <LI><a href="#[87]">selectTime</a> from timedate.o(i.selectTime) referenced from timedate.o(i.itemLoader)
 <LI><a href="#[b0]">setAnimations</a> from m_display.o(i.setAnimations) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[ad]">setBrightness</a> from m_display.o(i.setBrightness) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[ae]">setInvert</a> from m_display.o(i.setInvert) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[b1]">setLEDs</a> from m_display.o(i.setLEDs) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[af]">setRotate</a> from m_display.o(i.setRotate) referenced from m_display.o(i.setMenuOptions)
 <LI><a href="#[72]">setShowAuther</a> from diag.o(i.setShowAuther) referenced from diag.o(i.itemLoader)
 <LI><a href="#[74]">setShowFPS</a> from diag.o(i.setShowFPS) referenced from diag.o(i.itemLoader)
 <LI><a href="#[85]">setTimeout</a> from sleep.o(i.setTimeout) referenced from sleep.o(i.itemLoader)
 <LI><a href="#[b3]">setVolumeAlarm</a> from sound.o(i.setVolumeAlarm) referenced from sound.o(i.setMenuOptions)
 <LI><a href="#[b4]">setVolumeHour</a> from sound.o(i.setVolumeHour) referenced from sound.o(i.setMenuOptions)
 <LI><a href="#[b2]">setVolumeUI</a> from sound.o(i.setVolumeUI) referenced from sound.o(i.setMenuOptions)
 <LI><a href="#[a5]">set_draw_pic</a> from my_normal.o(i.set_draw_pic) referenced from my_normal.o(i.my_watchface_normal)
 <LI><a href="#[5b]">stopAlarm</a> from alarm.o(i.stopAlarm) referenced from alarm.o(i.alarm_update)
 <LI><a href="#[7a]">stopwatch_open</a> from stopwatch.o(i.stopwatch_open) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[5f]">timeDataDown</a> from timedate.o(i.timeDataDown) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[5d]">timeDataUp</a> from timedate.o(i.timeDataUp) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[60]">timeDateDraw</a> from timedate.o(i.timeDateDraw) referenced from timedate.o(i.beginSelect)
 <LI><a href="#[d5]">to_my_normal</a> from weather.o(i.to_my_normal) referenced from weather.o(i.weather_forecast)
 <LI><a href="#[79]">torch_open</a> from torch.o(i.torch_open) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[7b]">tunemakerOpen</a> from tunemaker.o(i.tunemakerOpen) referenced from m_main.o(i.itemLoader)
 <LI><a href="#[a3]">up</a> from my_normal.o(i.up) referenced from my_normal.o(i.my_watchface_normal)
 <LI><a href="#[bd]">up</a> from tunemaker.o(i.up) referenced from tunemaker.o(i.tunemakerOpen)
 <LI><a href="#[c2]">up</a> from watchface2.o(i.up) referenced from watchface2.o(i.watchface2)
 <LI><a href="#[c6]">up</a> from watchface.o(i.up) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[ca]">up</a> from face_cpu.o(i.up) referenced from face_cpu.o(i.watchface_CPU)
 <LI><a href="#[ce]">up</a> from watchface_asr.o(i.up) referenced from watchface_asr.o(i.watchface_ast)
 <LI><a href="#[d2]">up</a> from normal.o(i.up) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[8]">watchface2</a> from watchface2.o(i.watchface2) referenced 2 times from face_function.o(.data)
 <LI><a href="#[8]">watchface2</a> from watchface2.o(i.watchface2) referenced from watchface2.o(i.down)
 <LI><a href="#[8]">watchface2</a> from watchface2.o(i.watchface2) referenced from face_cpu.o(i.open_cpuface)
 <LI><a href="#[8]">watchface2</a> from watchface2.o(i.watchface2) referenced from watchface2.o(i.up)
 <LI><a href="#[8]">watchface2</a> from watchface2.o(i.watchface2) referenced from watchface2.o(i.watchface2)
 <LI><a href="#[9]">watchfaceOpen</a> from watchface.o(i.watchfaceOpen) referenced 2 times from face_function.o(.data)
 <LI><a href="#[9]">watchfaceOpen</a> from watchface.o(i.watchfaceOpen) referenced from watchface.o(i.down)
 <LI><a href="#[9]">watchfaceOpen</a> from watchface.o(i.watchfaceOpen) referenced from watchface.o(i.up)
 <LI><a href="#[9]">watchfaceOpen</a> from watchface.o(i.watchfaceOpen) referenced from watchface.o(i.watchfaceOpen)
 <LI><a href="#[a9]">watchface_CPU</a> from face_cpu.o(i.watchface_CPU) referenced from watchface2.o(i.open_cpuface)
 <LI><a href="#[c]">watchface_ast</a> from watchface_asr.o(i.watchface_ast) referenced 2 times from face_function.o(.data)
 <LI><a href="#[c]">watchface_ast</a> from watchface_asr.o(i.watchface_ast) referenced from watchface_asr.o(i.down)
 <LI><a href="#[c]">watchface_ast</a> from watchface_asr.o(i.watchface_ast) referenced from watchface_asr.o(i.up)
 <LI><a href="#[c]">watchface_ast</a> from watchface_asr.o(i.watchface_ast) referenced from watchface_asr.o(i.watchface_ast)
 <LI><a href="#[b]">watchface_normal</a> from normal.o(i.watchface_normal) referenced 2 times from face_function.o(.data)
 <LI><a href="#[b]">watchface_normal</a> from normal.o(i.watchface_normal) referenced from normal.o(i.down)
 <LI><a href="#[b]">watchface_normal</a> from normal.o(i.watchface_normal) referenced from normal.o(i.up)
 <LI><a href="#[b]">watchface_normal</a> from normal.o(i.watchface_normal) referenced from normal.o(i.watchface_normal)
 <LI><a href="#[a4]">weather_forecast</a> from weather.o(i.weather_forecast) referenced from my_normal.o(i.my_watchface_normal)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d6]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d9]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[239]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[23a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[23b]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[23c]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[23d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[da]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[105]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[dc]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[dd]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[df]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[23e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[eb]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[23f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[240]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[241]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[242]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[243]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[244]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[245]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[246]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[247]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[248]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[249]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[24a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[24b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[24d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[24f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[250]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[251]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[252]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[253]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[254]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[255]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[256]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[257]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[258]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[259]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[25a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[d8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[25b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ea]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[25c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ec]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; c_loop &rArr; usb_ttl_update &rArr; get_data_frombuf &rArr; get_weather_data_frombuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[25d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[120]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ef]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[25e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1c0]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25f]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[29]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[260]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
</UL>

<P><STRONG><a name="[f4]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ttl_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cube_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_use_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[f8]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_OLED_GRAM
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_cpuface
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[f9]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_reset
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_APPCONF_Data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRotate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ast
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
</UL>

<P><STRONG><a name="[fb]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_weather
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_drawDate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDraw
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_weather_forecast
</UL>

<P><STRONG><a name="[fe]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[ff]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[100]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[101]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[db]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[103]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[106]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_data_frombuf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cpu_data_frombuf
</UL>

<P><STRONG><a name="[109]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[e4]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[1bf]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_drawDate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_weather_forecast
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
</UL>

<P><STRONG><a name="[1db]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_weather
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_weather_forecast
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_use_get
</UL>

<P><STRONG><a name="[10a]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[261]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cpu_use
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[262]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ttl_update
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cube
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cube_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_use_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[10e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[10d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[195]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[110]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cpu_use
</UL>

<P><STRONG><a name="[1ef]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_type_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_data_frombuf
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[267]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[26a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[112]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e2]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[114]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[116]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[102]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fc]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[55]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[de]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[e0]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[fa]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[108]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[26e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[111]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[11a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[118]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[113]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[e9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e6]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[11b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[ee]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[11c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[121]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[12a]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[123]"></a>ADC_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[12e]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[137]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[136]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[12c]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[129]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[134]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[12b]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[135]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
</UL>

<P><STRONG><a name="[12d]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[125]"></a>Adc_Init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, adc.o(i.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Adc_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
</UL>

<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[132]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[14e]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[131]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[14c]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[130]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[128]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[208]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButtons
</UL>

<P><STRONG><a name="[144]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[143]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>

<P><STRONG><a name="[133]"></a>Get_Adc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, adc.o(i.Get_Adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>

<P><STRONG><a name="[138]"></a>Get_Adc_Average</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc.o(i.Get_Adc_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_updateNow
</UL>

<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>KEY_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
</UL>

<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1fd]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[1a4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[13b]"></a>OLED_Clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Clear &rArr; oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[13d]"></a>OLED_ColorTurn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, oled.o(i.OLED_ColorTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInvert
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisPlay_On
</UL>

<P><STRONG><a name="[13f]"></a>OLED_DisPlay_Off</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled.o(i.OLED_DisPlay_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_DisPlay_Off &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Status_set
</UL>

<P><STRONG><a name="[140]"></a>OLED_DisPlay_On</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oled.o(i.OLED_DisPlay_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_DisPlay_On &rArr; OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Status_set
</UL>

<P><STRONG><a name="[141]"></a>OLED_DisplayTurn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.OLED_DisplayTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_DisplayTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRotate
</UL>

<P><STRONG><a name="[142]"></a>OLED_Init</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[146]"></a>OLED_Set_Pos</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.OLED_Set_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[147]"></a>OLED_Status_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, oled.o(i.OLED_Status_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_Status_set &rArr; OLED_DisPlay_On &rArr; OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisPlay_On
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisPlay_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_screen
</UL>

<P><STRONG><a name="[13e]"></a>OLED_WR_Byte</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBrightness
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisPlay_On
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisPlay_Off
</UL>

<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[1fe]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[155]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[126]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[124]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[159]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[148]"></a>Read_Flash_APPCONF_Data</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, appconfig.o(i.Read_Flash_APPCONF_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Read_Flash_APPCONF_Data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[14a]"></a>Read_Flash_alarm_Data</STRONG> (Thumb, 38 bytes, Stack size 56 bytes, alarm.o(i.Read_Flash_alarm_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read_Flash_alarm_Data &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
</UL>

<P><STRONG><a name="[149]"></a>STMFLASH_Read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stmflash.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_APPCONF_Data
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_alarm_Data
</UL>

<P><STRONG><a name="[14b]"></a>STMFLASH_Write</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, stmflash.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Flash_APPCONF_Data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_reset
</UL>

<P><STRONG><a name="[14d]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stmflash.o(i.STMFLASH_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>Save_Flash_APPCONF_Data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, appconfig.o(i.Save_Flash_APPCONF_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_reset
</UL>

<P><STRONG><a name="[1b3]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, millis.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; led_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[200]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[153]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[202]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[154]"></a>TIM_DeInit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[151]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[1ff]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
</UL>

<P><STRONG><a name="[3c]"></a>USART1_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21a]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[156]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[219]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[158]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[157]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>WWDG_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wwdg.o(i.WWDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_SetCounter
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15a]"></a>WWDG_SetCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_wwdg.o(i.WWDG_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[15c]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[165]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[166]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[167]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[16a]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[16b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[169]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[104]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f2]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[122]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[16d]"></a>_update</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, led.o(i._update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _update
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_millis_get_10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_update
</UL>

<P><STRONG><a name="[16f]"></a>addBackOption</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(i.addBackOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[172]"></a>alarm_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, alarm.o(i.alarm_get))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_getNext
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>

<P><STRONG><a name="[171]"></a>alarm_getNext</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, alarm.o(i.alarm_getNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = alarm_getNext
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
</UL>

<P><STRONG><a name="[173]"></a>alarm_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, alarm.o(i.alarm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alarm_init &rArr; Read_Flash_alarm_Data &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_alarm_Data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[175]"></a>alarm_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alarm.o(i.alarm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = alarm_reset &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_reset
</UL>

<P><STRONG><a name="[176]"></a>alarm_save</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, alarm.o(i.alarm_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = alarm_save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
</UL>

<P><STRONG><a name="[177]"></a>alarm_update</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, alarm.o(i.alarm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = alarm_update &rArr; stopAlarm &rArr; getNextAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flashing
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[180]"></a>alldata_use_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, watchface2.o(i.alldata_use_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alldata_use_get
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1b5]"></a>animation_active</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, animation.o(i.animation_active))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[1ba]"></a>animation_movingOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, animation.o(i.animation_movingOn))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[1dc]"></a>animation_offsetY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, animation.o(i.animation_offsetY))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>

<P><STRONG><a name="[18e]"></a>animation_start</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, animation.o(i.animation_start))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_forecast
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_watchface_normal
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ast
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_CPU
</UL>

<P><STRONG><a name="[1b4]"></a>animation_update</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, animation.o(i.animation_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = animation_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[182]"></a>appconfig_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, appconfig.o(i.appconfig_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = appconfig_init &rArr; Read_Flash_APPCONF_Data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_watchface_total
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_watchface_fun
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_reset
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Flash_APPCONF_Data
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[183]"></a>appconfig_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, appconfig.o(i.appconfig_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = appconfig_reset &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Flash_APPCONF_Data
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_reset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[187]"></a>appconfig_save</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appconfig.o(i.appconfig_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Flash_APPCONF_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTimeDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_save
</UL>

<P><STRONG><a name="[59]"></a>back</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, menu.o(i.back))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = back &rArr; mMainOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(i.addBackOption)
</UL>
<P><STRONG><a name="[18a]"></a>battery_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, battery.o(i.battery_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = battery_init &rArr; Adc_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[18c]"></a>battery_setUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battery.o(i.battery_setUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update
</UL>

<P><STRONG><a name="[18b]"></a>battery_update</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, battery.o(i.battery_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = battery_update &rArr; battery_updateNow &rArr; Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_updateNow
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_setUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
</UL>

<P><STRONG><a name="[189]"></a>battery_updateNow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, battery.o(i.battery_updateNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = battery_updateNow &rArr; Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate
</UL>

<P><STRONG><a name="[1f3]"></a>battery_voltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(i.battery_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[18d]"></a>beginAnimation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu.o(i.beginAnimation))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
</UL>

<P><STRONG><a name="[18f]"></a>beginAnimation2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, menu.o(i.beginAnimation2))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGamesOpen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
</UL>

<P><STRONG><a name="[194]"></a>buttons_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, buttons.o(i.buttons_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = buttons_init &rArr; KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc_long
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[197]"></a>buttons_pressTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, buttons.o(i.buttons_pressTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buttons_pressTime
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitCount
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_press_longtime
</UL>

<P><STRONG><a name="[199]"></a>buttons_press_longtime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, buttons.o(i.buttons_press_longtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buttons_press_longtime &rArr; buttons_pressTime
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_pressTime
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>

<P><STRONG><a name="[17a]"></a>buttons_setFunc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buttons.o(i.buttons_setFunc))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
</UL>

<P><STRONG><a name="[196]"></a>buttons_setFunc_long</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, buttons.o(i.buttons_setFunc_long))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_watchface_normal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
</UL>

<P><STRONG><a name="[1e8]"></a>buttons_setFuncs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buttons.o(i.buttons_setFuncs))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torch_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myapp_open
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_forecast
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_watchface_normal
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ast
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_CPU
</UL>

<P><STRONG><a name="[203]"></a>buttons_setFuncs_add4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buttons.o(i.buttons_setFuncs_add4))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_forecast
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_watchface_normal
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ast
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_CPU
</UL>

<P><STRONG><a name="[19a]"></a>buttons_update</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, buttons.o(i.buttons_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = buttons_update &rArr; processButtons &rArr; processButton &rArr; buttons_press_longtime &rArr; buttons_pressTime
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButtons
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[19c]"></a>c_loop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.c_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = c_loop &rArr; usb_ttl_update &rArr; get_data_frombuf &rArr; get_weather_data_frombuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ttl_update
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_update
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_update
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_userActive
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_update
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>c_setup</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.c_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = c_setup &rArr; appconfig_init &rArr; Read_Flash_APPCONF_Data &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ttl_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;global_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>close_screen</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, face_function.o(i.close_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = close_screen &rArr; OLED_Status_set &rArr; OLED_DisPlay_On &rArr; OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_state_change
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Status_set
</UL>
<BR>[Address Reference Count : 4]<UL><LI> menu.o(i.menu_select)
<LI> buttons.o(i.buttons_init)
<LI> my_normal.o(i.up)
<LI> my_normal.o(i.down)
</UL>
<P><STRONG><a name="[1ad]"></a>cpu_use_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, face_cpu.o(i.cpu_use_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cpu_use_get
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cpu_use
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1b0]"></a>cpu_use_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, face_cpu.o(i.cpu_use_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cpu_use_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_CPU
</UL>

<P><STRONG><a name="[1b2]"></a>cube_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, watchface.o(i.cube_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cube_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
</UL>

<P><STRONG><a name="[1a5]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[145]"></a>delay_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
</UL>

<P><STRONG><a name="[61]"></a>display_load</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, display.o(i.display_load))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_my_normal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_cpuface
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_cpuface
</UL>
<BR>[Address Reference Count : 5]<UL><LI> game3.o(i.btnExit)
<LI> game1.o(i.btnExit)
<LI> game2.o(i.btnExit)
<LI> stopwatch.o(i.btnExit)
<LI> tunemaker.o(i.select)
</UL>
<P><STRONG><a name="[186]"></a>display_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.display_set))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;to_my_normal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_cpuface
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_cpuface
</UL>

<P><STRONG><a name="[179]"></a>display_setDrawFunc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, display.o(i.display_setDrawFunc))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torch_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myapp_open
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_forecast
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_watchface_normal
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ast
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface2
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_CPU
</UL>

<P><STRONG><a name="[1a2]"></a>display_update</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, display.o(i.display_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = display_update &rArr; draw_end &rArr; oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_update
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_end
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_animation
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[1cb]"></a>div10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, global.o(i.div10))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ticker
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving2_set
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alldata_use
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_ticker
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[1b7]"></a>doAction</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(i.doAction))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[1bd]"></a>draw_bitmap</STRONG> (Thumb, 336 bytes, Stack size 80 bytes, draw.o(i.draw_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_offsetY
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPixels
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap_s2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_weather
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pic
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cube
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_2
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_drawTickerNum
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ast
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_weather_forecast
</UL>

<P><STRONG><a name="[1c6]"></a>draw_bitmap_s2</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, game3.o(i.draw_bitmap_s2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = draw_bitmap_s2 &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[17e]"></a>draw_clearArea</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, draw.o(i.draw_clearArea))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
</UL>

<P><STRONG><a name="[1b6]"></a>draw_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, draw.o(i.draw_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = draw_end &rArr; oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[1de]"></a>draw_pic</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, my_normal.o(i.draw_pic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = draw_pic &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_weather
</UL>

<P><STRONG><a name="[17f]"></a>draw_string</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, draw.o(i.draw_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDraw
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_weather
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ticker
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_drawDate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDateDraw
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDraw
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_weather_forecast
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alldata_cmp
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_ticker
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cpu_use
</UL>

<P><STRONG><a name="[1c1]"></a>draw_string_P</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, draw.o(i.draw_string_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = draw_string_P &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[1d1]"></a>draw_weather</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, my_normal.o(i.draw_weather))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = draw_weather &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pic
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1fb]"></a>exitSelected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu.o(i.exitSelected))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[1e1]"></a>face_drawTickerNum</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, face_function.o(i.face_drawTickerNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = face_drawTickerNum &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ticker
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alldata_use
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_ticker
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[1d6]"></a>face_ticker</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, face_function.o(i.face_ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = face_ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving2_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_drawTickerNum
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[57]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1bc]"></a>free_OLED_GRAM</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, watchface.o(i.free_OLED_GRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free_OLED_GRAM &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[65]"></a>game1_draw</STRONG> (Thumb, 708 bytes, Stack size 56 bytes, game1.o(i.game1_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = game1_draw &rArr; draw_string_P &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game1.o(i.game1_start)
</UL>
<P><STRONG><a name="[75]"></a>game1_start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, game1.o(i.game1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = game1_start &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(i.itemLoader)
</UL>
<P><STRONG><a name="[76]"></a>game2_start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, game2.o(i.game2_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = game2_start &rArr; menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(i.itemLoader)
</UL>
<P><STRONG><a name="[77]"></a>game3_start</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, game3.o(i.game3_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = game3_start &rArr; menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(i.itemLoader)
</UL>
<P><STRONG><a name="[1eb]"></a>get_cpu_data_frombuf</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, usb_ttl.o(i.get_cpu_data_frombuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_cpu_data_frombuf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_frombuf
</UL>

<P><STRONG><a name="[1af]"></a>get_cpu_use</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, face_cpu.o(i.get_cpu_use))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_use_get
</UL>

<P><STRONG><a name="[1ec]"></a>get_data_frombuf</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usb_ttl.o(i.get_data_frombuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = get_data_frombuf &rArr; get_weather_data_frombuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_data_frombuf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cpu_data_frombuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ttl_update
</UL>

<P><STRONG><a name="[1bb]"></a>get_other_watchface</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, face_function.o(i.get_other_watchface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_other_watchface
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;down
</UL>

<P><STRONG><a name="[1ed]"></a>get_time_data_frombuf</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, usb_ttl.o(i.get_time_data_frombuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_time_data_frombuf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_frombuf
</UL>

<P><STRONG><a name="[185]"></a>get_watchface_fun</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, face_function.o(i.get_watchface_fun))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[184]"></a>get_watchface_total</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, face_function.o(i.get_watchface_total))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_init
</UL>

<P><STRONG><a name="[1df]"></a>get_weather</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_ttl.o(i.get_weather))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_weather
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_weather
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_weather_forecast
</UL>

<P><STRONG><a name="[1ee]"></a>get_weather_data_frombuf</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, usb_ttl.o(i.get_weather_data_frombuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = get_weather_data_frombuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_type_set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_frombuf
</UL>

<P><STRONG><a name="[1a9]"></a>global_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, global.o(i.global_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[152]"></a>led_flash</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, led.o(i.led_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_millis_get_10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[17c]"></a>led_flashing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led.o(i.led_flashing))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>

<P><STRONG><a name="[1a8]"></a>led_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[19f]"></a>led_update</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led.o(i.led_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_update &rArr; _update
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[78]"></a>mAlarmsOpen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, alarms.o(i.mAlarmsOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mAlarmsOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> alarms.o(i.mAlarmsOpen)
<LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[84]"></a>mDiagOpen</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, diag.o(i.mDiagOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mDiagOpen &rArr; battery_update &rArr; battery_updateNow &rArr; Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_update
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_tempUpdate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> diag.o(i.mDiagOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[83]"></a>mDisplayOpen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m_display.o(i.mDisplayOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mDisplayOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_display.o(i.mDisplayOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[7c]"></a>mGamesOpen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, games.o(i.mGamesOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mGamesOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> games.o(i.mGamesOpen)
<LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[188]"></a>mMainOpen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m_main.o(i.mMainOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mMainOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[7e]"></a>mSettingsOpen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, settings.o(i.mSettingsOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mSettingsOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_main.o(i.itemLoader)
<LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[81]"></a>mSleepOpen</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sleep.o(i.mSleepOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mSleepOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sleep.o(i.mSleepOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[82]"></a>mSoundOpen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sound.o(i.mSoundOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mSoundOpen &rArr; setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sound.o(i.mSoundOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[80]"></a>mTimeDateOpen</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timedate.o(i.mTimeDateOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mTimeDateOpen &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timedate.o(i.mTimeDateOpen)
<LI> settings.o(i.itemLoader)
</UL>
<P><STRONG><a name="[ed]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = main &rArr; c_loop &rArr; usb_ttl_update &rArr; get_data_frombuf &rArr; get_weather_data_frombuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7f]"></a>menu_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.menu_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torch_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myapp_open
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[96]"></a>menu_down</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.menu_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_down &rArr; doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[95]"></a>menu_draw</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, menu.o(i.menu_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = menu_draw &rArr; menu_drawIcon &rArr; drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[93]"></a>menu_select</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, menu.o(i.menu_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = menu_select &rArr; free_OLED_GRAM &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_movingOn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_OLED_GRAM
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mMainOpen
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc_long
</UL>
<BR>[Address Reference Count : 8]<UL><LI> normal.o(i.watchface_normal)
<LI> watchface.o(i.watchfaceOpen)
<LI> my_normal.o(i.my_watchface_normal)
<LI> watchface2.o(i.watchface2)
<LI> m_main.o(i.mMainOpen)
<LI> m_main.o(i.mOpen)
<LI> face_cpu.o(i.watchface_CPU)
<LI> watchface_asr.o(i.watchface_ast)
</UL>
<P><STRONG><a name="[97]"></a>menu_up</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.menu_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = menu_up &rArr; doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doBtn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[193]"></a>millis_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, millis.o(i.millis_get))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopwatch_update
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnStartStop
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnReset
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ast
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_use_get
</UL>

<P><STRONG><a name="[1aa]"></a>millis_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, millis.o(i.millis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = millis_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[1cc]"></a>mod10</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, global.o(i.mod10))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ticker
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving2_set
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alldata_use
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_ticker
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
</UL>

<P><STRONG><a name="[1e2]"></a>moving2_set</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, face_function.o(i.moving2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = moving2_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ticker
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_ticker
</UL>

<P><STRONG><a name="[16e]"></a>my_millis_get_10ms</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, millis.o(i.my_millis_get_10ms))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update
</UL>

<P><STRONG><a name="[a]"></a>my_watchface_normal</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, my_normal.o(i.my_watchface_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = my_watchface_normal &rArr; watchface_save &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs_add4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc_long
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_save
</UL>
<BR>[Address Reference Count : 6]<UL><LI> my_normal.o(i.my_watchface_normal)
<LI> my_normal.o(i.up)
<LI> face_function.o(.data)
<LI> weather.o(i.to_my_normal)
<LI> weather.o(i.weather_forecast)
<LI> my_normal.o(i.down)
</UL>
<P><STRONG><a name="[7d]"></a>myapp_open</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, myapp.o(i.myapp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = myapp_open &rArr; menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[8c]"></a>nextOption</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu.o(i.nextOption))
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDown
</UL>
<BR>[Address Reference Count : 9]<UL><LI> alarms.o(i.mAlarmsOpen)
<LI> alarms.o(i.selectAlarm)
<LI> sleep.o(i.mSleepOpen)
<LI> sound.o(i.mSoundOpen)
<LI> games.o(i.mGamesOpen)
<LI> m_display.o(i.mDisplayOpen)
<LI> diag.o(i.mDiagOpen)
<LI> m_main.o(i.mOpen)
<LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[d3]"></a>old_btn4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, face_function.o(i.old_btn4))
<BR>[Address Reference Count : 1]<UL><LI> normal.o(i.watchface_normal)
</UL>
<P><STRONG><a name="[13c]"></a>oled_flush</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, oled.o(i.oled_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = oled_flush &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_end
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[8a]"></a>prevOption</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu.o(i.prevOption))
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mUp
</UL>
<BR>[Address Reference Count : 9]<UL><LI> alarms.o(i.mAlarmsOpen)
<LI> alarms.o(i.selectAlarm)
<LI> sleep.o(i.mSleepOpen)
<LI> sound.o(i.mSoundOpen)
<LI> games.o(i.mGamesOpen)
<LI> m_display.o(i.mDisplayOpen)
<LI> diag.o(i.mDiagOpen)
<LI> m_main.o(i.mOpen)
<LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[181]"></a>put_cpu</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_ttl.o(i.put_cpu))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alldata_use_get
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cpu_use
</UL>

<P><STRONG><a name="[192]"></a>pwrmgr_setState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwrmgr.o(i.pwrmgr_setState))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunemakerOpen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;torch_open
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myapp_open
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnExit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnStartStop
</UL>

<P><STRONG><a name="[19e]"></a>pwrmgr_userActive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwrmgr.o(i.pwrmgr_userActive))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[1f9]"></a>rtc_tempUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m_rtc.o(i.rtc_tempUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
</UL>

<P><STRONG><a name="[191]"></a>setMenuFuncs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(i.setMenuFuncs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGamesOpen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
</UL>

<P><STRONG><a name="[1f7]"></a>setMenuInfo</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu.o(i.setMenuInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGamesOpen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
</UL>

<P><STRONG><a name="[1f2]"></a>setMenuOption</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, menu.o(i.setMenuOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[170]"></a>setMenuOption_P</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, menu.o(i.setMenuOption_P))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[1fa]"></a>setPrevMenuExit</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, menu.o(i.setPrevMenuExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSelect
</UL>

<P><STRONG><a name="[1f8]"></a>setPrevMenuOpen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu.o(i.setPrevMenuOpen))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mAlarmsOpen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSettingsOpen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDisplayOpen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mGamesOpen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mDiagOpen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mTimeDateOpen
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSleepOpen
</UL>

<P><STRONG><a name="[a5]"></a>set_draw_pic</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, my_normal.o(i.set_draw_pic))
<BR>[Address Reference Count : 1]<UL><LI> my_normal.o(i.my_watchface_normal)
</UL>
<P><STRONG><a name="[1d7]"></a>show</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, watchface2.o(i.show))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = show &rArr; show_alldata_use &rArr; face_drawTickerNum &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alldata_use
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_alldata_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[211]"></a>show_alldata_cmp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, watchface2.o(i.show_alldata_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = show_alldata_cmp &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show
</UL>

<P><STRONG><a name="[212]"></a>show_alldata_use</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, watchface2.o(i.show_alldata_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = show_alldata_use &rArr; face_drawTickerNum &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_drawTickerNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show
</UL>

<P><STRONG><a name="[1d0]"></a>show_battery_mode_1</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, battery.o(i.show_battery_mode_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show_battery_mode_1 &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ttl_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1ca]"></a>show_battery_mode_2</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, battery.o(i.show_battery_mode_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show_battery_mode_2 &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ttl_connected
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animateIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1d5]"></a>show_cpu_use</STRONG> (Thumb, 206 bytes, Stack size 88 bytes, face_cpu.o(i.show_cpu_use))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = show_cpu_use &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1cd]"></a>show_cube</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, watchface.o(i.show_cube))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show_cube &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OLED_DrawLine
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1d8]"></a>show_weather_forecast</STRONG> (Thumb, 208 bytes, Stack size 168 bytes, weather.o(i.show_weather_forecast))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = show_weather_forecast &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[20f]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[7a]"></a>stopwatch_open</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stopwatch.o(i.stopwatch_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stopwatch_open &rArr; menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[1a1]"></a>stopwatch_update</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stopwatch.o(i.stopwatch_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stopwatch_update
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[1d4]"></a>ticker</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, face_cpu.o(i.ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ticker &rArr; face_ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_drawTickerNum
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_ticker
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[20a]"></a>time_dow</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, time.o(i.time_dow))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[218]"></a>time_isLeapYear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, time.o(i.time_isLeapYear))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_monthDayCount
</UL>

<P><STRONG><a name="[20b]"></a>time_monthDayCount</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, time.o(i.time_monthDayCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = time_monthDayCount
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_isLeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_update
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[209]"></a>time_set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, time.o(i.time_set))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTimeDate
</UL>

<P><STRONG><a name="[1e9]"></a>time_timeMode</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, time.o(i.time_timeMode))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectAlarm
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goingOff
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>

<P><STRONG><a name="[1be]"></a>time_timeStr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, time.o(i.time_timeStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = time_timeStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[19d]"></a>time_update</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, time.o(i.time_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = time_update &rArr; time_monthDayCount
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_monthDayCount
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[79]"></a>torch_open</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, torch.o(i.torch_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = torch_open &rArr; menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[17b]"></a>tune_play</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tune.o(i.tune_play))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tune_play
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>

<P><STRONG><a name="[216]"></a>tune_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tune.o(i.tune_stop))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
</UL>

<P><STRONG><a name="[7b]"></a>tunemakerOpen</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tunemaker.o(i.tunemakerOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tunemakerOpen &rArr; cube_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cube_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.itemLoader)
</UL>
<P><STRONG><a name="[1a6]"></a>uart_init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[213]"></a>usb_ttl_connected</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_ttl.o(i.usb_ttl_connected))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_1
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_2
</UL>

<P><STRONG><a name="[1a7]"></a>usb_ttl_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_ttl.o(i.usb_ttl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_ttl_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_setup
</UL>

<P><STRONG><a name="[1a0]"></a>usb_ttl_update</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_ttl.o(i.usb_ttl_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = usb_ttl_update &rArr; get_data_frombuf &rArr; get_weather_data_frombuf &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data_frombuf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c_loop
</UL>

<P><STRONG><a name="[1ac]"></a>user_state_change</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwrmgr.o(i.user_state_change))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_screen
</UL>

<P><STRONG><a name="[8]"></a>watchface2</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, watchface2.o(i.watchface2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = watchface2 &rArr; watchface_save &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs_add4
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_save
</UL>
<BR>[Address Reference Count : 5]<UL><LI> face_function.o(.data)
<LI> watchface2.o(i.up)
<LI> watchface2.o(i.watchface2)
<LI> face_cpu.o(i.open_cpuface)
<LI> watchface2.o(i.down)
</UL>
<P><STRONG><a name="[9]"></a>watchfaceOpen</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, watchface.o(i.watchfaceOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = watchfaceOpen &rArr; watchface_save &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs_add4
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cube_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_save
</UL>
<BR>[Address Reference Count : 4]<UL><LI> watchface.o(i.down)
<LI> watchface.o(i.up)
<LI> watchface.o(i.watchfaceOpen)
<LI> face_function.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>watchface_CPU</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, face_cpu.o(i.watchface_CPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = watchface_CPU &rArr; cpu_use_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs_add4
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_use_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface2.o(i.open_cpuface)
</UL>
<P><STRONG><a name="[c]"></a>watchface_ast</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, watchface_asr.o(i.watchface_ast))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = watchface_ast &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs_add4
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_save
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 4]<UL><LI> face_function.o(.data)
<LI> watchface_asr.o(i.down)
<LI> watchface_asr.o(i.up)
<LI> watchface_asr.o(i.watchface_ast)
</UL>
<P><STRONG><a name="[1ce]"></a>watchface_drawDate</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, watchface.o(i.watchface_drawDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = watchface_drawDate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[b]"></a>watchface_normal</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, normal.o(i.watchface_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = watchface_normal &rArr; watchface_save &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs_add4
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_save
</UL>
<BR>[Address Reference Count : 4]<UL><LI> normal.o(i.up)
<LI> normal.o(i.watchface_normal)
<LI> face_function.o(.data)
<LI> normal.o(i.down)
</UL>
<P><STRONG><a name="[21b]"></a>watchface_num_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appconfig.o(i.watchface_num_set))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_save
</UL>

<P><STRONG><a name="[204]"></a>watchface_save</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, face_function.o(i.watchface_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = watchface_save &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_num_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weather_forecast
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_watchface_normal
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchfaceOpen
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_normal
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ast
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface2
</UL>

<P><STRONG><a name="[1cf]"></a>watchface_ticker</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, watchface.o(i.watchface_ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = watchface_ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving2_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_drawTickerNum
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[a4]"></a>weather_forecast</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, weather.o(i.weather_forecast))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = weather_forecast &rArr; watchface_save &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs_add4
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_save
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_normal.o(i.my_watchface_normal)
</UL>
<P><STRONG><a name="[1f0]"></a>weather_type_set</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, weather.o(i.weather_type_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = weather_type_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weather_data_frombuf
</UL>

<P><STRONG><a name="[58]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[20e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[21c]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[21f]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[222]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[16c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[224]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[225]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[270]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[163]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[271]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[15f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[226]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[21e]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[221]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[227]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[229]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[22a]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[22c]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[22e]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[233]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
</UL>

<P><STRONG><a name="[22f]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[230]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[231]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[272]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[1e3]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[273]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1e4]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[232]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[235]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[22b]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[21d]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[234]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[236]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[223]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[164]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1e6]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_draw
</UL>

<P><STRONG><a name="[238]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[150]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5a]"></a>draw</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, alarm.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = draw &rArr; time_timeStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(i.alarm_update)
</UL>
<P><STRONG><a name="[174]"></a>getNextAlarm</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, alarm.o(i.getNextAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getNextAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toMinutes
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAlarm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_init
</UL>

<P><STRONG><a name="[178]"></a>goingOff</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, alarm.o(i.goingOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = goingOff &rArr; alarm_getNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_getNext
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>

<P><STRONG><a name="[5b]"></a>stopAlarm</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, alarm.o(i.stopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stopAlarm &rArr; getNextAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_stop
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarm.o(i.alarm_update)
</UL>
<P><STRONG><a name="[1ea]"></a>toMinutes</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, alarm.o(i.toMinutes))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextAlarm
</UL>

<P><STRONG><a name="[ab]"></a>alarmsDown</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, alarms.o(i.alarmsDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alarmsDown
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[ac]"></a>alarmsDraw</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, alarms.o(i.alarmsDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = alarmsDraw &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[aa]"></a>alarmsUp</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, alarms.o(i.alarmsUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alarmsUp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[17d]"></a>getMaxValForSetting</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, alarms.o(i.getMaxValForSetting))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsUp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarmsDown
</UL>

<P><STRONG><a name="[89]"></a>itemLoader</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, alarms.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeAlarmStr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> alarms.o(i.mAlarmsOpen)
<LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[8b]"></a>mSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, alarms.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> alarms.o(i.mAlarmsOpen)
<LI> alarms.o(i.selectAlarm)
</UL>
<P><STRONG><a name="[1f1]"></a>makeAlarmStr</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, alarms.o(i.makeAlarmStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = makeAlarmStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[71]"></a>selectAlarm</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, alarms.o(i.selectAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = selectAlarm &rArr; alarm_save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_save
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms.o(i.itemLoader)
</UL>
<P><STRONG><a name="[198]"></a>bitCount</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, buttons.o(i.bitCount))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_pressTime
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>

<P><STRONG><a name="[207]"></a>processButton</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, buttons.o(i.processButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = processButton &rArr; buttons_press_longtime &rArr; buttons_pressTime
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_press_longtime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitCount
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButtons
</UL>

<P><STRONG><a name="[19b]"></a>processButtons</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, buttons.o(i.processButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = processButtons &rArr; processButton &rArr; buttons_press_longtime &rArr; buttons_pressTime
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processButton
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_update
</UL>

<P><STRONG><a name="[73]"></a>batteryUpdate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diag.o(i.batteryUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = batteryUpdate &rArr; battery_updateNow &rArr; Get_Adc_Average &rArr; Get_Adc &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_updateNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.itemLoader)
</UL>
<P><STRONG><a name="[8d]"></a>itemLoader</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, diag.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.mDiagOpen)
</UL>
<P><STRONG><a name="[8e]"></a>mSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, diag.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mSelect &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.mDiagOpen)
</UL>
<P><STRONG><a name="[72]"></a>setShowAuther</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, diag.o(i.setShowAuther))
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.itemLoader)
</UL>
<P><STRONG><a name="[74]"></a>setShowFPS</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, diag.o(i.setShowFPS))
<BR>[Address Reference Count : 1]<UL><LI> diag.o(i.itemLoader)
</UL>
<P><STRONG><a name="[1b1]"></a>crt_animation</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, display.o(i.crt_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = crt_animation
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_update
</UL>

<P><STRONG><a name="[1dd]"></a>readPixels</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, draw.o(i.readPixels))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>

<P><STRONG><a name="[66]"></a>btnExit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, game1.o(i.btnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = btnExit &rArr; game1_start &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game1.o(i.game1_start)
</UL>
<P><STRONG><a name="[67]"></a>btnLeft</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, game1.o(i.btnLeft))
<BR>[Address Reference Count : 1]<UL><LI> game1.o(i.game1_start)
</UL>
<P><STRONG><a name="[68]"></a>btnRight</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, game1.o(i.btnRight))
<BR>[Address Reference Count : 1]<UL><LI> game1.o(i.game1_start)
</UL>
<P><STRONG><a name="[6a]"></a>btnDown</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, game2.o(i.btnDown))
<BR>[Address Reference Count : 1]<UL><LI> game2.o(i.game2_start)
</UL>
<P><STRONG><a name="[6b]"></a>btnExit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, game2.o(i.btnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = btnExit &rArr; game2_start &rArr; menu_close &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game2.o(i.game2_start)
</UL>
<P><STRONG><a name="[6c]"></a>btnUp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, game2.o(i.btnUp))
<BR>[Address Reference Count : 1]<UL><LI> game2.o(i.game2_start)
</UL>
<P><STRONG><a name="[69]"></a>draw</STRONG> (Thumb, 818 bytes, Stack size 56 bytes, game2.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = draw &rArr; draw_string_P &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game2.o(i.game2_start)
</UL>
<P><STRONG><a name="[6f]"></a>btnBounce</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, game3.o(i.btnBounce))
<BR>[Address Reference Count : 1]<UL><LI> game3.o(i.game3_start)
</UL>
<P><STRONG><a name="[6e]"></a>btnExit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, game3.o(i.btnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game3.o(i.game3_start)
</UL>
<P><STRONG><a name="[70]"></a>btnPause</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, game3.o(i.btnPause))
<BR>[Address Reference Count : 1]<UL><LI> game3.o(i.game3_start)
</UL>
<P><STRONG><a name="[6d]"></a>draw</STRONG> (Thumb, 592 bytes, Stack size 72 bytes, game3.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = draw &rArr; draw_string_P &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap_s2
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeOverlap
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string_P
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game3.o(i.game3_start)
</UL>
<P><STRONG><a name="[1c7]"></a>judgeOverlap</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, game3.o(i.judgeOverlap))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = judgeOverlap
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[91]"></a>itemLoader</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, games.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(i.mGamesOpen)
</UL>
<P><STRONG><a name="[92]"></a>mSelect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, games.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> games.o(i.mGamesOpen)
</UL>
<P><STRONG><a name="[8f]"></a>itemLoader</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m_display.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = itemLoader &rArr; setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.mDisplayOpen)
</UL>
<P><STRONG><a name="[90]"></a>mSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m_display.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mSelect &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.mDisplayOpen)
</UL>
<P><STRONG><a name="[b0]"></a>setAnimations</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_display.o(i.setAnimations))
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[ad]"></a>setBrightness</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, m_display.o(i.setBrightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setBrightness &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[ae]"></a>setInvert</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m_display.o(i.setInvert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setInvert &rArr; OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[b1]"></a>setLEDs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, m_display.o(i.setLEDs))
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[1f4]"></a>setMenuOptions</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, m_display.o(i.setMenuOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[af]"></a>setRotate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m_display.o(i.setRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = setRotate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_display.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[1f5]"></a>getItemCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m_main.o(i.getItemCount))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mOpen
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
</UL>

<P><STRONG><a name="[98]"></a>itemLoader</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, m_main.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = itemLoader &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemCount
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[94]"></a>mOpen</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m_main.o(i.mOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mOpen &rArr; setMenuInfo &rArr; clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuOpen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginAnimation2
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_setDrawFunc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFuncs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getItemCount
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m_main.o(i.mMainOpen)
<LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[99]"></a>mSelect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m_main.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m_main.o(i.mOpen)
</UL>
<P><STRONG><a name="[206]"></a>checkScroll</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu.o(i.checkScroll))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prevOption
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextOption
</UL>

<P><STRONG><a name="[1ab]"></a>clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuInfo
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_close
</UL>

<P><STRONG><a name="[1b9]"></a>doBtn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menu.o(i.doBtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = doBtn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_movingOn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_active
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_up
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_down
</UL>

<P><STRONG><a name="[1da]"></a>drawTitle</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, menu.o(i.drawTitle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
</UL>

<P><STRONG><a name="[1b8]"></a>loader</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu.o(i.loader))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_drawIcon
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
</UL>

<P><STRONG><a name="[1fc]"></a>menu_drawIcon</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, menu.o(i.menu_drawIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = menu_drawIcon &rArr; drawTitle &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loader
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTitle
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_draw
</UL>

<P><STRONG><a name="[d1]"></a>down</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, normal.o(i.down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = down &rArr; get_other_watchface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(i.watchface_normal)
</UL>
<P><STRONG><a name="[d0]"></a>draw</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, normal.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = draw &rArr; ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(i.watchface_normal)
</UL>
<P><STRONG><a name="[1c8]"></a>drawDate</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, normal.o(i.drawDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = drawDate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1c9]"></a>ticker</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, normal.o(i.ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving2_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_drawTickerNum
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[d2]"></a>up</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, normal.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = up &rArr; get_other_watchface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> normal.o(i.watchface_normal)
</UL>
<P><STRONG><a name="[9a]"></a>itemLoader</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, settings.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[9b]"></a>mSelect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, settings.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> settings.o(i.mSettingsOpen)
</UL>
<P><STRONG><a name="[9c]"></a>itemLoader</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sleep.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.mSleepOpen)
</UL>
<P><STRONG><a name="[9e]"></a>mDraw</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sleep.o(i.mDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = mDraw &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.mSleepOpen)
</UL>
<P><STRONG><a name="[9d]"></a>mSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sleep.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mSelect &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.mSleepOpen)
</UL>
<P><STRONG><a name="[85]"></a>setTimeout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sleep.o(i.setTimeout))
<BR>[Address Reference Count : 1]<UL><LI> sleep.o(i.itemLoader)
</UL>
<P><STRONG><a name="[9f]"></a>itemLoader</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sound.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = itemLoader &rArr; setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOptions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.mSoundOpen)
</UL>
<P><STRONG><a name="[a0]"></a>mSelect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sound.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mSelect &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.mSoundOpen)
</UL>
<P><STRONG><a name="[1f6]"></a>setMenuOptions</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sound.o(i.setMenuOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = setMenuOptions &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itemLoader
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mSoundOpen
</UL>

<P><STRONG><a name="[210]"></a>setVolume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sound.o(i.setVolume))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeUI
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeHour
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolumeAlarm
</UL>

<P><STRONG><a name="[b3]"></a>setVolumeAlarm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sound.o(i.setVolumeAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[b4]"></a>setVolumeHour</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sound.o(i.setVolumeHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeHour
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[b2]"></a>setVolumeUI</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sound.o(i.setVolumeUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVolumeUI
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVolume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(i.setMenuOptions)
</UL>
<P><STRONG><a name="[b6]"></a>btnExit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stopwatch.o(i.btnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnExit
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.stopwatch_open)
</UL>
<P><STRONG><a name="[b8]"></a>btnReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stopwatch.o(i.btnReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnReset
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.stopwatch_open)
</UL>
<P><STRONG><a name="[b7]"></a>btnStartStop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stopwatch.o(i.btnStartStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btnStartStop
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.stopwatch_open)
</UL>
<P><STRONG><a name="[b5]"></a>draw</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stopwatch.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = draw &rArr; time_timeStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeStr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stopwatch.o(i.stopwatch_open)
</UL>
<P><STRONG><a name="[190]"></a>beginSelect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timedate.o(i.beginSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = beginSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[1e0]"></a>endSelect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timedate.o(i.endSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = endSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuFuncs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTime
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectDate
</UL>

<P><STRONG><a name="[217]"></a>getMaxValForSetting</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, timedate.o(i.getMaxValForSetting))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDataUp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeDataDown
</UL>

<P><STRONG><a name="[5c]"></a>itemLoader</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, timedate.o(i.itemLoader))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = itemLoader &rArr; addBackOption &rArr; setMenuOption_P &rArr; setMenuOption &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBackOption
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMenuOption_P
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 3]<UL><LI> timedate.o(i.beginSelect)
<LI> timedate.o(i.endSelect)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[64]"></a>mDown</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timedate.o(i.mDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mDown
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextOption
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timedate.o(i.endSelect)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[5e]"></a>mSelect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timedate.o(i.mSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mSelect &rArr; setPrevMenuExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPrevMenuExit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exitSelected
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doAction
</UL>
<BR>[Address Reference Count : 3]<UL><LI> timedate.o(i.beginSelect)
<LI> timedate.o(i.endSelect)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[63]"></a>mUp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timedate.o(i.mUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mUp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prevOption
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timedate.o(i.endSelect)
<LI> timedate.o(i.mTimeDateOpen)
</UL>
<P><STRONG><a name="[88]"></a>saveTimeDate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timedate.o(i.saveTimeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = saveTimeDate &rArr; appconfig_save &rArr; Save_Flash_APPCONF_Data &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appconfig_save
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.itemLoader)
</UL>
<P><STRONG><a name="[86]"></a>selectDate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, timedate.o(i.selectDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = selectDate &rArr; endSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_monthDayCount
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_dow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.itemLoader)
</UL>
<P><STRONG><a name="[87]"></a>selectTime</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, timedate.o(i.selectTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = selectTime &rArr; endSelect &rArr; setMenuFuncs
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_timeMode
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endSelect
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beginSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.itemLoader)
</UL>
<P><STRONG><a name="[5f]"></a>timeDataDown</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timedate.o(i.timeDataDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timeDataDown
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.beginSelect)
</UL>
<P><STRONG><a name="[5d]"></a>timeDataUp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timedate.o(i.timeDataUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeDataUp
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValForSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.beginSelect)
</UL>
<P><STRONG><a name="[60]"></a>timeDateDraw</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, timedate.o(i.timeDateDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = timeDateDraw &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_clearArea
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timedate.o(i.beginSelect)
</UL>
<P><STRONG><a name="[ba]"></a>btnExit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, torch.o(i.btnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = btnExit &rArr; OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> torch.o(i.torch_open)
</UL>
<P><STRONG><a name="[bb]"></a>btnFlashRate</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, torch.o(i.btnFlashRate))
<BR>[Address Reference Count : 1]<UL><LI> torch.o(i.torch_open)
</UL>
<P><STRONG><a name="[b9]"></a>draw</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, torch.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = draw &rArr; OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> torch.o(i.torch_open)
</UL>
<P><STRONG><a name="[205]"></a>next</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tune.o(i.next))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tune_play
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next
</UL>

<P><STRONG><a name="[bf]"></a>down</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tunemaker.o(i.down))
<BR>[Address Reference Count : 1]<UL><LI> tunemaker.o(i.tunemakerOpen)
</UL>
<P><STRONG><a name="[bc]"></a>draw</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tunemaker.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = draw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cube
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tunemaker.o(i.tunemakerOpen)
</UL>
<P><STRONG><a name="[be]"></a>select</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tunemaker.o(i.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = select &rArr; free_OLED_GRAM &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;animation_start
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_OLED_GRAM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tunemaker.o(i.tunemakerOpen)
</UL>
<P><STRONG><a name="[bd]"></a>up</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tunemaker.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = up &rArr; select &rArr; free_OLED_GRAM &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tunemaker.o(i.tunemakerOpen)
</UL>
<P><STRONG><a name="[214]"></a>animateIcon</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, battery.o(i.animateIcon))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_2
</UL>

<P><STRONG><a name="[215]"></a>_OLED_DrawLine</STRONG> (Thumb, 190 bytes, Stack size 44 bytes, watchface.o(i._OLED_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _OLED_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cube
</UL>

<P><STRONG><a name="[c5]"></a>down</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, watchface.o(i.down))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = down &rArr; free_OLED_GRAM &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_OLED_GRAM
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface.o(i.watchfaceOpen)
</UL>
<P><STRONG><a name="[c4]"></a>draw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, watchface.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = draw &rArr; watchface_ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ticker
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_drawDate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cube
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface.o(i.watchfaceOpen)
</UL>
<P><STRONG><a name="[c7]"></a>modeset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, watchface.o(i.modeset))
<BR>[Address Reference Count : 1]<UL><LI> watchface.o(i.watchfaceOpen)
</UL>
<P><STRONG><a name="[c6]"></a>up</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, watchface.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = up &rArr; free_OLED_GRAM &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_OLED_GRAM
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface.o(i.watchfaceOpen)
</UL>
<P><STRONG><a name="[a2]"></a>down</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, my_normal.o(i.down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = down &rArr; get_other_watchface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc_long
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_normal.o(i.my_watchface_normal)
</UL>
<P><STRONG><a name="[a1]"></a>draw</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, my_normal.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = draw &rArr; draw_weather &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_weather
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawDate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_normal.o(i.my_watchface_normal)
</UL>
<P><STRONG><a name="[1d2]"></a>drawDate</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, my_normal.o(i.drawDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = drawDate &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[1d3]"></a>ticker</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, my_normal.o(i.ticker))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod10
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div10
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moving2_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_drawTickerNum
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[a3]"></a>up</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, my_normal.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = up &rArr; get_other_watchface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_setFunc_long
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> my_normal.o(i.my_watchface_normal)
</UL>
<P><STRONG><a name="[a7]"></a>btnExit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, myapp.o(i.btnExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = btnExit &rArr; OLED_ColorTurn &rArr; OLED_WR_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwrmgr_setState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myapp.o(i.myapp_open)
</UL>
<P><STRONG><a name="[a8]"></a>btnFlashRate</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, myapp.o(i.btnFlashRate))
<BR>[Address Reference Count : 1]<UL><LI> myapp.o(i.myapp_open)
</UL>
<P><STRONG><a name="[a6]"></a>draw</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, myapp.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = draw &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myapp.o(i.myapp_open)
</UL>
<P><STRONG><a name="[c9]"></a>down</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, face_cpu.o(i.down))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = down
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> face_cpu.o(i.watchface_CPU)
</UL>
<P><STRONG><a name="[c8]"></a>draw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, face_cpu.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = draw &rArr; ticker &rArr; face_ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cpu_use
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_use_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> face_cpu.o(i.watchface_CPU)
</UL>
<P><STRONG><a name="[cb]"></a>open_cpuface</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, face_cpu.o(i.open_cpuface))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = open_cpuface &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> face_cpu.o(i.watchface_CPU)
</UL>
<P><STRONG><a name="[ca]"></a>up</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, face_cpu.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = up
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> face_cpu.o(i.watchface_CPU)
</UL>
<P><STRONG><a name="[c1]"></a>down</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, watchface2.o(i.down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = down &rArr; get_other_watchface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface2.o(i.watchface2)
</UL>
<P><STRONG><a name="[c0]"></a>draw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, watchface2.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = draw &rArr; show &rArr; show_alldata_use &rArr; face_drawTickerNum &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_2
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alldata_use_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;face_ticker
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface2.o(i.watchface2)
</UL>
<P><STRONG><a name="[c3]"></a>open_cpuface</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, watchface2.o(i.open_cpuface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = open_cpuface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface2.o(i.watchface2)
</UL>
<P><STRONG><a name="[c2]"></a>up</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, watchface2.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = up &rArr; get_other_watchface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface2.o(i.watchface2)
</UL>
<P><STRONG><a name="[d4]"></a>draw</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, weather.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = draw &rArr; show_weather_forecast &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_weather_forecast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> weather.o(i.weather_forecast)
</UL>
<P><STRONG><a name="[d5]"></a>to_my_normal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, weather.o(i.to_my_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = to_my_normal
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> weather.o(i.weather_forecast)
</UL>
<P><STRONG><a name="[cd]"></a>down</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, watchface_asr.o(i.down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = down &rArr; get_other_watchface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface_asr.o(i.watchface_ast)
</UL>
<P><STRONG><a name="[cc]"></a>draw</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, watchface_asr.o(i.draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = draw &rArr; watchface_ticker &rArr; draw_string &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_ticker
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchface_drawDate
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_battery_mode_1
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_ast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface_asr.o(i.watchface_ast)
</UL>
<P><STRONG><a name="[cf]"></a>modeset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, watchface_asr.o(i.modeset))
<BR>[Address Reference Count : 1]<UL><LI> watchface_asr.o(i.watchface_ast)
</UL>
<P><STRONG><a name="[1d9]"></a>show_ast</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, watchface_asr.o(i.show_ast))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = show_ast &rArr; draw_bitmap
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis_get
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>

<P><STRONG><a name="[ce]"></a>up</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, watchface_asr.o(i.up))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = up &rArr; get_other_watchface
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_load
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_other_watchface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchface_asr.o(i.watchface_ast)
</UL>
<P><STRONG><a name="[228]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[220]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[237]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[22d]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[56]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
